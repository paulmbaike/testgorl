openapi: 3.0.0
info:
  title: Sample API for RL Test Generator
  description: A simple API to demonstrate the RL-based test suite generator
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /users:
    get:
      summary: List all users
      description: Retrieve a list of all users in the system
      operationId: getUsers
      tags:
        - Users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                users_list:
                  summary: Example users list
                  value:
                    - id: 1
                      name: "John Doe"
                      email: "john@example.com"
                      age: 30
                    - id: 2
                      name: "Jane Smith"
                      email: "jane@example.com"
                      age: 25

    post:
      summary: Create a new user
      description: Create a new user in the system
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              new_user:
                summary: Example new user
                value:
                  name: "Alice Johnson"
                  email: "alice@example.com"
                  age: 28
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Update user
      description: Update an existing user's information
      operationId: updateUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to update
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Delete user
      description: Delete a user from the system
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/profile:
    get:
      summary: Get user profile
      description: Retrieve detailed profile information for a user
      operationId: getUserProfile
      tags:
        - Users
        - Profiles
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user whose profile to retrieve
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user
          example: 1
        name:
          type: string
          description: Full name of the user
          example: "John Doe"
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
          example: "john@example.com"
        age:
          type: integer
          minimum: 0
          maximum: 150
          description: Age of the user
          example: 30
        createdAt:
          type: string
          format: date-time
          description: When the user was created
          example: "2023-01-01T12:00:00Z"

    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: Full name of the user
          example: "Alice Johnson"
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
          example: "alice@example.com"
        age:
          type: integer
          minimum: 0
          maximum: 150
          description: Age of the user
          example: 28

    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: Full name of the user
          example: "John Smith"
          maxLength: 100
        email:
          type: string
          format: email
          description: Email address of the user
          example: "johnsmith@example.com"
        age:
          type: integer
          minimum: 0
          maximum: 150
          description: Age of the user
          example: 31

    UserProfile:
      type: object
      required:
        - userId
        - bio
      properties:
        userId:
          type: integer
          format: int64
          description: ID of the user this profile belongs to
          example: 1
        bio:
          type: string
          description: User's biography
          example: "Software developer with 5 years of experience"
          maxLength: 500
        website:
          type: string
          format: uri
          description: User's personal website
          example: "https://johndoe.com"
        socialMedia:
          type: object
          properties:
            twitter:
              type: string
              example: "@johndoe"
            linkedin:
              type: string
              example: "linkedin.com/in/johndoe"

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Error code
          example: 400
        message:
          type: string
          description: Error message
          example: "Invalid input provided"
        details:
          type: string
          description: Additional error details
          example: "The email field is required"

tags:
  - name: Users
    description: Operations related to user management
  - name: Profiles
    description: Operations related to user profiles 